     1: #include <htc.h>
     2: #include <stdlib.h>
     3: 
     4: __CONFIG(FOSC_HS & WDTE_OFF & PWRTE_ON & CP_OFF); // Config word
     5: 
     6: #define _XTAL_FREQ 20000000 // Define CPU Frequency
     7: 
     8: //Physical Parameters
     9: #define num_floors 4
    10: #define move_time 1000
    11: #define max_people 5
    12: #define num_hours 3
    13: #define interrupt_time 3000
    14: 
    15: //LCD Pins
    16: #define E RA3
    17: #define RS RA4
    18: 
    19: //LCD Properties
    20: #define line_size 24
    21: 
    22: //LCD Hex Codes
    23: #define LCD_ON 0x0E
    24: #define LCD_OFF 0x0A
    25: #define clear_screen 0x01
    26: #define cursor_left 0x10
    27: #define cursor_right 0x14
    28: #define cursor_forwards 0x06
    29: #define cursor_backwards 0x04
    30: #define line2 0xC0
    31: 
    32: //Switches Pressed
    33: #define S1 (RA0 == 0 && RA1 == 0 && RA2 == 0)
    34: #define S2 (RA0 == 1 && RA1 == 0 && RA2 == 0)
    35: #define S3 (RA0 == 0 && RA1 == 1 && RA2 == 0)
    36: #define S4 (RA0 == 1 && RA1 == 1 && RA2 == 0)
    37: #define S5 (RA0 == 0 && RA1 == 0 && RA2 == 1)
    38: #define S6 (RA0 == 1 && RA1 == 0 && RA2 == 1)
    39: #define S7 (RA0 == 0 && RA1 == 1 && RA2 == 1)
    40: 
    41: //Switches Names
    42: #define CONFIRM 7
    43: 
    44: void disp_string(const char* c);
    45: void cmd(char cmd_msg);
    46: void clr_char(char spaces);
    47: void initialize();
    48: void interrupt hour_ISR();
    49: void button_press();
    50: void max_prob_floor();
    51: void call_max();
    52: void call_min();
    53: void set_floor();
    54: void floor_details();
    55: void moving();
    56: 
    57: const char people_msg[] = "People: ";
    58: const char floor_msg[] = "Flrs: ";
    59: const char stopped_msg[] = "Stop: Flr ";
    60: const char moving_msg[] = "Move: Flr ";
    61: const char reached_msg[] = "Reach: Flr ";
    62: 
    63: char temp;
    64: signed char floor_call[num_floors] = {0};
    65: signed char cabin_call[num_floors] = {0};
    66: signed char current_floor;
    67: signed char destination_floor;
    68: signed char floor_index;
    69: signed char floor_direction;
    70: signed char button;
    71: signed char i;
    72: signed char hour;
    73: signed int counter2;
    74: bit prob_move;
    75: signed char prob_matrix[num_floors][num_hours] = {{0}};
    76: 
    77: void disp_string(const char* c){
    78: RS = 1;
    79: if (*c == NULL){
    80:     PORTB = temp;
    81:     E = 1;
    82:     __delay_us(0.35);
    83:     E = 0;
    84:     }
    85: else {
    86:     for (; *c != '\0'; c++){
    87:         PORTB = *c;
    88:         E = 1;
    89:         __delay_us(0.35);
    90:         E = 0;
    91:         }
    92:     }
    93: }
    94: 
    95: void cmd(char cmd_msg){
    96: PORTB = cmd_msg;
    97: RS = 0;
    98: E = 1;
    99: __delay_us(0.35);
   100: E = 0;
   101: }
   102: 
   103: void clr_char(char spaces){
   104: cmd(cursor_backwards);
   105: RS = 1;
   106: for (i = spaces; i != -1; i--){
   107:     PORTB = ' ';
   108:     E = 1;
   109:     __delay_us(0.35);
   110:     E = 0;
   111:     }
   112: cmd(cursor_forwards);
   113: cmd(cursor_right);
   114: }
   115: 
   116: void initialize(){
   117: //MCU
   118: PORTA = 0x00; //Initialize PORTA pins to 0
   119: PORTB = 0x00; //Initialize PORTB pins to 0
   120: TRISB = 0x00; //Set PORTB pins to output mode
   121: TRISA = 0x07; // Set PORTA pins as: Set A0, A1 and A2 as input mode and Set A3 and A4 as output mode
   122: 
   123: //Timer
   124: TMR0 = 0; //Clear previous timer overflow counter register
   125: OPTION_REG = 0x08; //T0CS = 0 - Turn on the Timer0; PSA = 1 - Select WDT as clock; PS2, PS1, PS0 = 0 - For prescaler of 1:1
   126: T0IE = 1; //Enable Timer 0 interrupts
   127: GIE = 1; //Enable global interrupts bit
   128: 
   129: //LCD
   130: //cmd(LCD_ON);
   131: //cmd(clear_screen);
   132: }
   133: 
   134: void interrupt hour_ISR(){
   135: counter2--;
   136: if (counter2 == 0){
   137:     counter2 = interrupt_time;
   138:     hour++;
   139:     if (hour == num_hours)
   140:         hour = 0;
   141:     cmd(LCD_OFF);
   142:     __delay_ms(2);
   143:     cmd(LCD_ON);
   144:     }
   145: T0IF = 0;
   146: GIE = 1;
   147: }
   148: 
   149: void button_press(){
   150: button = -1;
   151: floor_index = -1;
   152: floor_direction = -1;
   153: 
   154: if (S1)
   155:     button = 1;
   156: else if (S2)
   157:     button = 2;
   158: else if (S3)
   159:     button = 3;
   160: else if (S4)
   161:     button = 4;
   162: else if (S5)
   163:     button = 5;
   164: else if (S6)
   165:     button = 6;
   166: else if (S7)
   167:     button = 7;
   168: 
   169: if (button != -1){
   170:     if (button == 1){
   171:         floor_index = 0;
   172:         floor_direction = 1;
   173:         }
   174:     for (i = num_floors*2 - 3; i != 1; i--){
   175:         if (button == i){
   176:             floor_index = i >> 1; 
   177:             floor_direction = 1;
   178:             if (i % 2 != 0)
   179:                 floor_direction = 2;
   180:             break;
   181:             }
   182:         }
   183:     if (button == num_floors*2 - 2){
   184:         floor_index = num_floors - 1;
   185:         floor_direction = 2;
   186:         }
   187:     }
   188: }
   189: 
   190: void max_prob_floor(){
   191: prob_move = 1;
   192: destination_floor = num_floors - 1;
   193: for (i = num_floors - 2; i != -1; i--){
   194:     if (prob_matrix[i][hour] > prob_matrix[destination_floor][hour])
   195:         destination_floor = i;
   196:     }
   197: if ((prob_matrix[destination_floor][hour] == 0) || (current_floor == destination_floor)){
   198:     destination_floor = -1;
   199:     prob_move = 0;
   200:     }
   201: }
   202: 
   203: void call_max(){
   204: for (i = num_floors - 1; i > -1; i--){
   205:     if ((cabin_call[i] != 0) || (floor_call[i] != 0)){
   206:         destination_floor = i;
   207:         break;
   208:         }
   209:     }
   210: }
   211: 
   212: void call_min(){
   213: for (i = num_floors - 1; i > -1; i--){
   214:     if ((cabin_call[i] != 0) || (floor_call[i] != 0))
   215:         destination_floor = i;
   216:     }
   217: }
   218: 
   219: void set_floor(){
   220: if ((floor_call[floor_index] != floor_direction) && (floor_call[floor_index] < 3)){
   221:     if (floor_call[floor_index] == 2)
   222:         floor_call[floor_index] = 3;
   223:     floor_call[floor_index] += floor_direction;
   224:     if (prob_move){
   225:         destination_floor = floor_index;
   226:         prob_move = 0;
   227:         }
   228:     else if (destination_floor != -1){
   229:         if (((current_floor < destination_floor) && ((floor_direction == floor_call[destination_floor]) || (floor_call[destination_floor] > 2) || (floor_index == num_floors - 1)) && (floor_index > destination_floor))
   230:             || ((current_floor > destination_floor) && ((floor_direction == floor_call[destination_floor]) || (floor_call[destination_floor] > 2) || (floor_index == 0)) && (floor_index < destination_floor)))
   231:             destination_floor = floor_index;
   232:         //else if ((current_floor > destination_floor) && ((floor_direction == floor_call[destination_floor]) || (floor_call[destination_floor] > 2) || (floor_index == 0)) && (floor_index < destination_floor))
   233:             //destination_floor = floor_index;
   234:         }
   235:     }
   236: }
   237: 
   238: void floor_details(){
   239: cmd(line2);
   240: signed char j = 0;
   241: temp = '0';
   242: disp_string(&people_msg);
   243: disp_string(NULL);
   244: button_press();
   245: while (button != CONFIRM){
   246:     if (button != -1){
   247:         if (floor_index == current_floor){
   248:             if (button % 2 != 0 && button != 1){
   249:                 if (j == 0)
   250:                     j = max_people + 1;
   251:                 j--;
   252:                 }
   253:             else {
   254:                 if (j == max_people)
   255:                     j = -1;
   256:                 j++;  
   257:                 }
   258:             clr_char(1);
   259:             temp = j + '0';
   260:             disp_string(NULL);
   261:             }
   262:         else 
   263:             set_floor();
   264:         }
   265:     button_press();
   266:     }
   267: prob_matrix[current_floor][hour] += j;
   268: clr_char(9); //strlen("People: 0")
   269: j = 0;
   270: if (current_floor == 0)
   271:     j = 1;
   272: temp = j + '0';
   273: disp_string(&floor_msg);
   274: disp_string(NULL);
   275: while (1){
   276:     button_press();
   277:     if (button != -1){
   278:         if (floor_index == current_floor){
   279:             if (button % 2 != 0 && button != 1){
   280:                 if (j == 0)
   281:                     j = num_floors + 1;
   282:                 j--;
   283:                 if (j == current_floor){
   284:                     if (j == 0)
   285:                         j = num_floors + 1;
   286:                     j--;
   287:                     }
   288:                 }
   289:             else {
   290:                 if (j == num_floors)
   291:                     j = -1;
   292:                 j++;
   293:                 if (j == current_floor)
   294:                     j++;
   295:                 }
   296:             clr_char(1);
   297:             if (j == num_floors){
   298:                 temp = 'X';
   299:                 disp_string(NULL);
   300:                 }
   301:             else {
   302:                 temp = j + '0';
   303:                 disp_string(NULL);
   304:                 }
   305:             }
   306:         else if (button == CONFIRM){
   307:             if (j == num_floors)
   308:                 break;
   309:             else {
   310:                 cabin_call[j] = 1;
   311:                 if (current_floor > j)
   312:                     cabin_call[j] = 2;
   313:                 }
   314:             }
   315:         else
   316:             set_floor();
   317:         }
   318:     }
   319: clr_char(7); //strlen("Flrs: X")
   320: }
   321: 
   322: void moving(){
   323: int counter = move_time;
   324: while (current_floor != destination_floor){
   325:     cmd(clear_screen);
   326:     temp = current_floor + '0';
   327:     disp_string(&moving_msg);
   328:     disp_string(NULL);
   329:     while (counter != 0){
   330:         counter--;
   331:         button_press();
   332:         if ((button != -1) && (button != CONFIRM)){
   333:             set_floor();
   334:             }
   335:         if ((floor_call[current_floor] > 2) || ((current_floor < destination_floor) && (floor_call[current_floor] == 1)) || ((current_floor > destination_floor) && (floor_call[current_floor] == 2))){
   336:             if ((current_floor < destination_floor) && (floor_call[current_floor] >= 3))
   337:                 floor_call[current_floor] = 2;
   338:             else if ((current_floor > destination_floor) && (floor_call[current_floor] >= 3))
   339:                 floor_call[current_floor] = 1;
   340:             else
   341:                 floor_call[current_floor] = 0;
   342:             cabin_call[current_floor] = 0;
   343:             cmd(clear_screen);
   344:             disp_string(&reached_msg);
   345:             disp_string(NULL);
   346:             floor_details();
   347:             cmd(clear_screen);
   348:             temp = current_floor + '0';
   349:             disp_string(&moving_msg);
   350:             disp_string(NULL);
   351:             }
   352:         if (cabin_call[current_floor] != 0){
   353:             cabin_call[current_floor] = 0;
   354:             cmd(clear_screen);
   355:             disp_string(&reached_msg);
   356:             disp_string(NULL);
   357:             __delay_ms(5);
   358:             cmd(clear_screen);
   359:             disp_string(&moving_msg);
   360:             disp_string(NULL);
   361:             }
   362:         }
   363:     counter = move_time;
   364:     current_floor = current_floor + ((destination_floor - current_floor > 0) - (destination_floor - current_floor < 0));
   365:     }
   366: cmd(clear_screen);
   367: temp = destination_floor + '0';
   368: disp_string(&reached_msg);
   369: disp_string(NULL);
   370: prob_move = 0;
   371: destination_floor = -1;
   372: if (floor_call[current_floor] != 0){
   373:     cabin_call[current_floor] = 0;
   374:     floor_details();
   375:     if (floor_call[current_floor] % 2 == 0){
   376:         if (floor_call[current_floor] == 4)
   377:             floor_call[current_floor] = 3;
   378:         floor_call[current_floor] -= 2;    
   379:         call_min();
   380:         }
   381:     else {
   382:         floor_call[current_floor] -= 1; 
   383:         call_max();
   384:         }
   385:     }
   386: else if (cabin_call[current_floor] != 0){
   387:     if (cabin_call[current_floor] == 1){
   388:         cabin_call[current_floor] = 0;
   389:         call_min();
   390:         }
   391:     else {
   392:         cabin_call[current_floor] = 0;
   393:         call_max();
   394:         }
   395:     __delay_ms(5);
   396:     }
   397: if ((current_floor < destination_floor) && (destination_floor != -1))
   398:     call_max();
   399: else if ((current_floor > destination_floor) && (destination_floor != -1))
   400:     call_min();
   401: if (destination_floor == -1)
   402:     max_prob_floor();
   403: }
   404: 
   405: void main(){
   406: initialize();
   407: hour = 0;
   408: counter2 = interrupt_time;
   409: prob_move = 0;
   410: current_floor = 0;
   411: destination_floor = -1;
   412: i = -10;
   413: while (1){
   414:     button_press();
   415:     if ((button != -1) && (button != CONFIRM)){
   416:         floor_call[floor_index] = floor_direction;
   417:         destination_floor = floor_index;
   418:         }
   419:     while (destination_floor != -1){
   420:             moving();
   421:             i = -10;
   422:         }
   423:     if (i == -10){
   424:         i = -9;
   425:         cmd(clear_screen);
   426:         temp = current_floor + '0';
   427:         disp_string(&stopped_msg);
   428:         disp_string(NULL);
   429:         }
   430:     max_prob_floor();
   431:     }
   432: }