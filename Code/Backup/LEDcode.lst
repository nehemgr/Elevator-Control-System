     1: #include <htc.h>
     2: #include <string.h>
     3: #include <stdlib.h>
     4: #include <stdbool.h>
     5: 
     6: __CONFIG(FOSC_HS & WDTE_OFF & PWRTE_ON & CP_OFF); // Config word
     7: 
     8: #define _XTAL_FREQ 20000000 // Define CPU Frequency
     9: 
    10: //Physical Parameters
    11: #define num_floors 4
    12: #define move_time 3000
    13: #define max_people 5
    14: 
    15: //LCD Pins
    16: #define E RA3
    17: #define RS RA4
    18: 
    19: //LCD Properties
    20: #define line_size 24
    21: 
    22: //LCD Hex Codes
    23: #define LCD_set 0x0E
    24: #define clear_screen 0x01
    25: #define cursor_left 0x10
    26: #define cursor_right 0x14
    27: #define cursor_forwards 0x06
    28: #define cursor_backwards 0x04
    29: #define line2 0xC0
    30: 
    31: //Switches Pressed
    32: #define S1 (RA0 == 0 && RA1 == 0 && RA2 == 0)
    33: #define S2 (RA0 == 1 && RA1 == 0 && RA2 == 0)
    34: #define S3 (RA0 == 0 && RA1 == 1 && RA2 == 0)
    35: #define S4 (RA0 == 1 && RA1 == 1 && RA2 == 0)
    36: #define S5 (RA0 == 0 && RA1 == 0 && RA2 == 1)
    37: #define S6 (RA0 == 1 && RA1 == 0 && RA2 == 1)
    38: #define S7 (RA0 == 0 && RA1 == 1 && RA2 == 1)
    39: 
    40: //Switches Names
    41: #define F0_UP 1
    42: #define F1_UP 2
    43: #define F1_DOWN 3
    44: #define F2_UP 4
    45: #define F2_DOWN 5
    46: #define F3_DOWN 6
    47: #define CONFIRM 7
    48: 
    49: char msg[25];
    50: short floor_call[num_floors];
    51: bool cabin_call[num_floors];
    52: short current_floor;
    53: short destination_floor;
    54: short button;
    55: short i;
    56: short j;
    57: 
    58: void disp(){
    59: for (i = 0; i < strlen(msg); i++){
    60:     PORTB = msg[i];
    61:     RS = 1;
    62:     E = 1;
    63:     __delay_us(0.35);
    64:     E = 0;
    65:     }
    66: }
    67: 
    68: void cmd(char cmd_msg){
    69: PORTB = cmd_msg;
    70: RS = 0;
    71: E = 1;
    72: __delay_us(0.35);
    73: E = 0;
    74: }
    75: 
    76: void clr_char(short spaces){
    77: for (i = 0; i < spaces + 1; i++){
    78:     msg[i] = ' ';
    79:     }
    80: msg[spaces + 1] = '\0';
    81: cmd(cursor_backwards);
    82: disp();
    83: cmd(cursor_forwards);
    84: cmd(cursor_right);
    85: }
    86: 
    87: void initialize(){
    88: //MCU
    89: PORTA = 0x00; //Initialize PORTA pins to 0
    90: PORTB = 0x00; //Initialize PORTB pins to 0
    91: TRISB = 0x00; //Set PORTB pins to output mode
    92: TRISA0 = 1; //Set A0 as input mode
    93: TRISA1 = 1; //Set A1 as input mode
    94: TRISA2 = 1; //Set A2 as input mode
    95: TRISA3 = 0; //Set A3 as output mode
    96: TRISA4 = 0; //Set A4 as output mode
    97: 
    98: //LCD
    99: cmd(LCD_set);
   100: cmd(clear_screen);
   101: }
   102: 
   103: short button_press(){
   104: if (S1)
   105:     return 1;
   106: if (S2)
   107:     return 2;
   108: if (S3)
   109:     return 3;
   110: if (S4)
   111:     return 4;
   112: if (S5)
   113:     return 5;
   114: if (S6)
   115:     return 6;
   116: if (S7)
   117:     return 7;
   118: return -1;
   119: }
   120: 
   121: short button_to_floor(){
   122: if (button == 1)
   123:     return 0;
   124: for (i = 2, j = 1; i <= num_floors*2 - 4; i = i + 2, j++){
   125:     if ((button == i) || (button == i + 1))
   126:         return j;
   127:     }
   128: if (button == num_floors*2 - 2)
   129:     return num_floors - 1;
   130: return -1;
   131: }
   132: 
   133: short button_direction(){
   134: if (button == 1)
   135:     return 1;
   136: for (i = 2; i <= num_floors*2 - 4; i++){
   137:     if ((button == i) && (i % 2 == 0))
   138:         return 1;
   139:     else if ((button == i) && (i % 2 != 0))
   140:         return 2;
   141:     }
   142: if (button == num_floors*2 - 2)
   143:     return 2;
   144: return -1;
   145: }
   146: 
   147: short cabin_call_max(){
   148: for (i = num_floors - 1; i > -1; i--){
   149:     if (cabin_call[i] == 1)
   150:         return i;
   151:     }
   152: }
   153: 
   154: short cabin_call_min(){
   155: for (i = 0; i < num_floors; i++){
   156:     if (cabin_call[i] == 1)
   157:         return i;
   158:     }
   159: }
   160: 
   161: short nearest_call(){
   162: for (i = current_floor - 1, j = current_floor + 1; (i != -1 || j != num_floors); i--, j++){
   163:     if (j < num_floors)
   164:         if ((floor_call[j] != 0) || (cabin_call[j] == 1))
   165:             return j;
   166:     if (i > -1)
   167:         if ((floor_call[i] != 0) || (cabin_call[i] == 1))
   168:             return i;
   169:     }
   170: return -1;
   171: }
   172: 
   173: void set_floor(){
   174: if ((floor_call[button_to_floor()] != button_direction()) && (floor_call[button_to_floor()] != 3) && (floor_call[button_to_floor()] != 4)){
   175:     if (floor_call[button_to_floor()] == 2)
   176:         floor_call[button_to_floor()] = 4;
   177:     else
   178:         floor_call[button_to_floor()] += button_direction();
   179:     }
   180: }
   181: 
   182: void set_destination(){
   183: if (destination_floor != -1){
   184:     if ((current_floor < destination_floor) && ((button_direction() == floor_call[destination_floor]) || (floor_call[destination_floor] > 2)) && (button_to_floor() > destination_floor))
   185:         destination_floor = button_to_floor();
   186:     else if ((current_floor > destination_floor) && ((button_direction() == floor_call[destination_floor]) || (floor_call[destination_floor] > 2)) && (button_to_floor() < destination_floor))
   187:         destination_floor = button_to_floor();
   188:     }
   189: }
   190: 
   191: void floor_details(){
   192: cmd(line2);
   193: strcpy(msg, "Enter People: \0");
   194: disp();
   195: short i = 0;
   196: itoa(msg, i, 10);
   197: disp();
   198: button = button_press();
   199: while (button != CONFIRM){
   200:     if (button != -1){
   201:         if (button_to_floor() == current_floor){
   202:             if (button % 2 != 0 && button != 1){
   203:                 if (i == 0)
   204:                     i = max_people + 1;
   205:                 i--;
   206:                 }
   207:             else {
   208:                 if (i == max_people)
   209:                     i = -1;
   210:                 i++;  
   211:                 }
   212:             clr_char(1);
   213:             itoa(msg, i, 10);
   214:             disp();
   215:             }
   216:         else{
   217:             set_floor();
   218:             set_destination();
   219:             }
   220:         }
   221:     button = button_press();
   222:     }
   223: clr_char(strlen("Enter People: 0\0"));
   224: strcpy(msg, "Enter Floors: \0");
   225: disp();
   226: i = 0;
   227: itoa(msg, i, 10);
   228: disp();
   229: while (1){
   230:     button = button_press();
   231:     if (button != -1){
   232:         if (button_to_floor() == current_floor){
   233:             if (button % 2 != 0 && button != 1){
   234:                 if (i == 0)
   235:                     i = num_floors + 1;
   236:                 i--;
   237:                 if (i == current_floor)
   238:                     if (i == 0)
   239:                         i = num_floors + 1;
   240:                     i--;
   241:                 }
   242:             else {
   243:                 if (i == num_floors)
   244:                     i = -1;
   245:                 i++;
   246:                 if (i == current_floor)
   247:                     i++;
   248:                 }
   249:             clr_char(strlen(msg));
   250:             if (i == num_floors){
   251:                 strcpy(msg, "Exit \0");
   252:                 disp();
   253:                 }
   254:             else {
   255:                 itoa(msg, i, 10);
   256:                 disp(); 
   257:                 }
   258:             }
   259:         else if (button == CONFIRM){
   260:             if (i == num_floors)
   261:                 break;
   262:             else {
   263:                 cabin_call[i] = 1;
   264:                 }
   265:             }
   266:         else{
   267:             set_floor();
   268:             set_destination();
   269:             }
   270:         }
   271:     }
   272: clr_char(strlen("Enter Floors: Exit \0"));
   273: }
   274: 
   275: void moving(){
   276: short counter = 0;
   277: while (current_floor != destination_floor){
   278:     strcpy(msg, "Moving - Floor  \0");
   279:     msg[strlen(msg)-1] = current_floor + '0';
   280:     disp();
   281:     while (counter <= move_time){
   282:         counter++;
   283:         button = button_press();
   284:         if (button != -1){
   285:             set_floor();
   286:             set_destination();
   287:             }
   288:         if (((current_floor < destination_floor) && ((floor_call[current_floor] == 1) || (floor_call[current_floor] > 2))) || ((current_floor > destination_floor) && (floor_call[current_floor] >= 2))){
   289:             if ((current_floor < destination_floor) && (floor_call[current_floor] >= 3))
   290:                 floor_call[current_floor] = 2;
   291:             if ((current_floor > destination_floor) && (floor_call[current_floor] >= 3))
   292:                 floor_call[current_floor] = 1;
   293:             if (cabin_call[current_floor] == 1)
   294:                 cabin_call[current_floor] = 0;
   295:             cmd(clear_screen);
   296:             strcpy(msg, "Stationary - Floor  \0");
   297:             msg[strlen(msg)-1] = current_floor + '0';
   298:             disp();
   299:             floor_details();
   300:             break;
   301:             }
   302:         if (cabin_call[current_floor] == 1){
   303:             cabin_call[current_floor] = 0;
   304:             cmd(clear_screen);
   305:             strcpy(msg, "Reached - Floor  \0");
   306:             msg[strlen(msg)-1] = current_floor + '0';
   307:             disp();
   308:             }
   309:         }
   310:     counter = 0;
   311:     current_floor = current_floor + ((destination_floor - current_floor > 0) - (destination_floor - current_floor < 0));
   312:     cmd(clear_screen);
   313:     }
   314: if (floor_call[destination_floor] != 0){
   315:     if (cabin_call[destination_floor] == 1)
   316:         cabin_call[destination_floor] = 0;
   317:     strcpy(msg, "Stationary - Floor  \0");
   318:     msg[strlen(msg)-1] = destination_floor + '0';
   319:     disp();
   320:     destination_floor = -1;
   321:     floor_details();
   322:     if (floor_call[current_floor] % 2 == 0){
   323:         if (floor_call[current_floor] == 4)
   324:             floor_call[current_floor] = 1;
   325:         destination_floor = cabin_call_min();
   326:         }
   327:     else if (floor_call[current_floor] % 2 != 0){
   328:         if (floor_call[current_floor] == 3)
   329:             floor_call[current_floor] = 2;
   330:         destination_floor = cabin_call_max();
   331:         }
   332:     }
   333: else if (cabin_call[destination_floor] == 1){
   334:     cabin_call[destination_floor] = 0;
   335:     cmd(clear_screen);
   336:     strcpy(msg, "Reached - Floor  \0");
   337:     msg[strlen(msg)-1] = current_floor + '0';
   338:     disp();
   339:     destination_floor = -1;
   340:     }
   341: }
   342: 
   343: void main(){
   344: initialize();
   345: current_floor = 0;
   346: destination_floor = -1;
   347: strcpy(msg, "Stationary - Floor 0\0");
   348: disp();
   349: while (1){
   350:     button = button_press();
   351:     if ((button != -1) && (destination_floor == -1)){
   352:         floor_call[button_to_floor()] = button_direction();
   353:         destination_floor = button_to_floor();
   354:         cmd(clear_screen);
   355:         moving();
   356:         }
   357:     else if (destination_floor != -1){
   358:         cmd(clear_screen);
   359:         moving();
   360:         }
   361:     else
   362:         destination_floor = nearest_call();
   363:     }
   364: }
   365: 
