
# 1 "LEDcode.c"

# 53 "C:\Program Files (x86)\HI-TECH Software\PICC\9.82\include\pic16f84a.h"
volatile unsigned char INDF @ 0x000;



volatile unsigned char TMR0 @ 0x001;



volatile unsigned char PCL @ 0x002;



volatile unsigned char STATUS @ 0x003;

volatile bit CARRY @ ((unsigned)&STATUS*8)+0;
volatile bit DC @ ((unsigned)&STATUS*8)+1;
volatile bit ZERO @ ((unsigned)&STATUS*8)+2;
volatile bit nPD @ ((unsigned)&STATUS*8)+3;
volatile bit nTO @ ((unsigned)&STATUS*8)+4;
volatile bit IRP @ ((unsigned)&STATUS*8)+7;
volatile bit RP0 @ ((unsigned)&STATUS*8)+5;
volatile bit RP1 @ ((unsigned)&STATUS*8)+6;

volatile union {
struct {
unsigned C : 1;
unsigned DC : 1;
unsigned Z : 1;
unsigned nPD : 1;
unsigned nTO : 1;
unsigned RP : 2;
unsigned IRP : 1;
};
struct {
unsigned : 5;
unsigned RP0 : 1;
unsigned RP1 : 1;
};
} STATUSbits @ 0x003;



volatile unsigned char FSR @ 0x004;



volatile unsigned char PORTA @ 0x005;

volatile bit RA0 @ ((unsigned)&PORTA*8)+0;
volatile bit RA1 @ ((unsigned)&PORTA*8)+1;
volatile bit RA2 @ ((unsigned)&PORTA*8)+2;
volatile bit RA3 @ ((unsigned)&PORTA*8)+3;
volatile bit RA4 @ ((unsigned)&PORTA*8)+4;

volatile union {
struct {
unsigned RA0 : 1;
unsigned RA1 : 1;
unsigned RA2 : 1;
unsigned RA3 : 1;
unsigned RA4 : 1;
};
} PORTAbits @ 0x005;



volatile unsigned char PORTB @ 0x006;

volatile bit RB0 @ ((unsigned)&PORTB*8)+0;
volatile bit RB1 @ ((unsigned)&PORTB*8)+1;
volatile bit RB2 @ ((unsigned)&PORTB*8)+2;
volatile bit RB3 @ ((unsigned)&PORTB*8)+3;
volatile bit RB4 @ ((unsigned)&PORTB*8)+4;
volatile bit RB5 @ ((unsigned)&PORTB*8)+5;
volatile bit RB6 @ ((unsigned)&PORTB*8)+6;
volatile bit RB7 @ ((unsigned)&PORTB*8)+7;

volatile union {
struct {
unsigned RB0 : 1;
unsigned RB1 : 1;
unsigned RB2 : 1;
unsigned RB3 : 1;
unsigned RB4 : 1;
unsigned RB5 : 1;
unsigned RB6 : 1;
unsigned RB7 : 1;
};
} PORTBbits @ 0x006;



volatile unsigned char EEDATA @ 0x008;



volatile unsigned char EEADR @ 0x009;



volatile unsigned char PCLATH @ 0x00A;


volatile union {
struct {
unsigned PCLATH : 5;
};
} PCLATHbits @ 0x00A;



volatile unsigned char INTCON @ 0x00B;

volatile bit RBIF @ ((unsigned)&INTCON*8)+0;
volatile bit INTF @ ((unsigned)&INTCON*8)+1;
volatile bit T0IF @ ((unsigned)&INTCON*8)+2;
volatile bit RBIE @ ((unsigned)&INTCON*8)+3;
volatile bit INTE @ ((unsigned)&INTCON*8)+4;
volatile bit T0IE @ ((unsigned)&INTCON*8)+5;
volatile bit EEIE @ ((unsigned)&INTCON*8)+6;
volatile bit GIE @ ((unsigned)&INTCON*8)+7;
volatile bit TMR0IF @ ((unsigned)&INTCON*8)+2;
volatile bit TMR0IE @ ((unsigned)&INTCON*8)+5;

volatile union {
struct {
unsigned RBIF : 1;
unsigned INTF : 1;
unsigned T0IF : 1;
unsigned RBIE : 1;
unsigned INTE : 1;
unsigned T0IE : 1;
unsigned EEIE : 1;
unsigned GIE : 1;
};
struct {
unsigned : 2;
unsigned TMR0IF : 1;
unsigned : 2;
unsigned TMR0IE : 1;
};
} INTCONbits @ 0x00B;

# 203
volatile unsigned char OPTION_REG @ 0x081;

volatile bit PSA @ ((unsigned)&OPTION_REG*8)+3;
volatile bit T0SE @ ((unsigned)&OPTION_REG*8)+4;
volatile bit T0CS @ ((unsigned)&OPTION_REG*8)+5;
volatile bit INTEDG @ ((unsigned)&OPTION_REG*8)+6;
volatile bit nRBPU @ ((unsigned)&OPTION_REG*8)+7;
volatile bit PS0 @ ((unsigned)&OPTION_REG*8)+0;
volatile bit PS1 @ ((unsigned)&OPTION_REG*8)+1;
volatile bit PS2 @ ((unsigned)&OPTION_REG*8)+2;

volatile union {
struct {
unsigned PS : 3;
unsigned PSA : 1;
unsigned T0SE : 1;
unsigned T0CS : 1;
unsigned INTEDG : 1;
unsigned nRBPU : 1;
};
struct {
unsigned PS0 : 1;
unsigned PS1 : 1;
unsigned PS2 : 1;
};
} OPTION_REGbits @ 0x081;



volatile unsigned char TRISA @ 0x085;

volatile bit TRISA0 @ ((unsigned)&TRISA*8)+0;
volatile bit TRISA1 @ ((unsigned)&TRISA*8)+1;
volatile bit TRISA2 @ ((unsigned)&TRISA*8)+2;
volatile bit TRISA3 @ ((unsigned)&TRISA*8)+3;
volatile bit TRISA4 @ ((unsigned)&TRISA*8)+4;

volatile union {
struct {
unsigned TRISA0 : 1;
unsigned TRISA1 : 1;
unsigned TRISA2 : 1;
unsigned TRISA3 : 1;
unsigned TRISA4 : 1;
};
} TRISAbits @ 0x085;



volatile unsigned char TRISB @ 0x086;

volatile bit TRISB0 @ ((unsigned)&TRISB*8)+0;
volatile bit TRISB1 @ ((unsigned)&TRISB*8)+1;
volatile bit TRISB2 @ ((unsigned)&TRISB*8)+2;
volatile bit TRISB3 @ ((unsigned)&TRISB*8)+3;
volatile bit TRISB4 @ ((unsigned)&TRISB*8)+4;
volatile bit TRISB5 @ ((unsigned)&TRISB*8)+5;
volatile bit TRISB6 @ ((unsigned)&TRISB*8)+6;
volatile bit TRISB7 @ ((unsigned)&TRISB*8)+7;

volatile union {
struct {
unsigned TRISB0 : 1;
unsigned TRISB1 : 1;
unsigned TRISB2 : 1;
unsigned TRISB3 : 1;
unsigned TRISB4 : 1;
unsigned TRISB5 : 1;
unsigned TRISB6 : 1;
unsigned TRISB7 : 1;
};
} TRISBbits @ 0x086;



volatile unsigned char EECON1 @ 0x088;

volatile bit RD @ ((unsigned)&EECON1*8)+0;
volatile bit WR @ ((unsigned)&EECON1*8)+1;
volatile bit WREN @ ((unsigned)&EECON1*8)+2;
volatile bit WRERR @ ((unsigned)&EECON1*8)+3;
volatile bit EEIF @ ((unsigned)&EECON1*8)+4;

volatile union {
struct {
unsigned RD : 1;
unsigned WR : 1;
unsigned WREN : 1;
unsigned WRERR : 1;
unsigned EEIF : 1;
};
} EECON1bits @ 0x088;



volatile unsigned char EECON2 @ 0x089;


# 27 "C:\Program Files (x86)\HI-TECH Software\PICC\9.82\include\pic.h"
#pragma inline(_nop)
extern void _nop(void);

# 80
extern unsigned int flash_read(unsigned short addr);

# 144
extern void flash_erase(unsigned short addr);

# 41 "C:\Program Files (x86)\HI-TECH Software\PICC\9.82\include\eeprom_routines.h"
extern unsigned char eeprom_write(unsigned char addr, unsigned char value);
extern unsigned char eeprom_read(unsigned char addr);
extern void eecpymem(volatile unsigned char *to, eeprom unsigned char *from, unsigned char size);
extern void memcpyee(eeprom unsigned char *to, const unsigned char *from, unsigned char size);


# 153 "C:\Program Files (x86)\HI-TECH Software\PICC\9.82\include\pic.h"
#pragma inline(_delay)
extern void _delay(unsigned long);

# 4 "C:\Program Files (x86)\HI-TECH Software\PICC\9.82\include\stdlib.h"
typedef int ptrdiff_t;
typedef unsigned size_t;
typedef unsigned short wchar_t;

# 16
extern int errno;

# 27
typedef struct {
int rem;
int quot;
} div_t;
typedef struct {
unsigned rem;
unsigned quot;
} udiv_t;
typedef struct {
long quot;
long rem;
} ldiv_t;
typedef struct {
unsigned long quot;
unsigned long rem;
} uldiv_t;

# 65
extern double atof(const char *);
extern double strtod(const char *, const char **);
extern int atoi(const char *);
extern unsigned xtoi(const char *);
extern long atol(const char *);
extern long strtol(const char *, char **, int);

extern int rand(void);
extern void srand(unsigned int);
extern void * calloc(size_t, size_t);
extern div_t div(int numer, int denom);
extern udiv_t udiv(unsigned numer, unsigned denom);
extern ldiv_t ldiv(long numer, long denom);
extern uldiv_t uldiv(unsigned long numer,unsigned long denom);
extern unsigned long _lrotl(unsigned long value, unsigned int shift);
extern unsigned long _lrotr(unsigned long value, unsigned int shift);
extern unsigned int _rotl(unsigned int value, unsigned int shift);
extern unsigned int _rotr(unsigned int value, unsigned int shift);

# 106
extern void * malloc(size_t);
extern void free(void *);
extern void * realloc(void *, size_t);

# 122
extern void abort(void);
extern void exit(int);
extern int atexit(void (*)(void));
extern char * getenv(const char *);
extern char ** environ;
extern int system(char *);
extern void qsort(void *, size_t, size_t, int (*)(const void *, const void *));
extern void * bsearch(const void *, void *, size_t, size_t, int(*)(const void *, const void *));
extern int abs(int);
extern long labs(long);

# 145
extern char * itoa(char * buf, int val, int base);
extern char * utoa(char * buf, unsigned val, int base);
extern char * ltoa(char * buf, long val, int base);
extern char * ultoa(char * buf, unsigned long val, int base);

# 4 "LEDcode.c"
asm("\tpsect config,class=CONFIG,delta=2"); asm("\tdw ""0xFFFE & 0xFFFB & 0xFFF7 & 0xFFFF");

# 44
void disp_string(const char* c);
void cmd(char cmd_msg);
void clr_char(char spaces);
void initialize();
void interrupt hour_ISR();
void button_press();
void max_prob_floor();
void call_max();
void call_min();
void set_floor();
void floor_details();
void moving();

const char people_msg[] = "People: ";
const char floor_msg[] = "Flrs: ";
const char stopped_msg[] = "Stop: Flr ";
const char moving_msg[] = "Move: Flr ";
const char reached_msg[] = "Reach: Flr ";

char temp;
signed char floor_call[4] = {0};
signed char cabin_call[4] = {0};
signed char current_floor;
signed char destination_floor;
signed char floor_index;
signed char floor_direction;
signed char button;
signed char i;
signed char hour;
signed int counter2;
bit prob_move;
signed char prob_matrix[4][3] = {{0}};

void disp_string(const char* c){
RA4 = 1;
if (*c == (0)){
PORTB = temp;
RA3 = 1;
_delay((unsigned long)((0.35)*(20000000/4000000.0)));
RA3 = 0;
}
else {
for (; *c != '\0'; c++){
PORTB = *c;
RA3 = 1;
_delay((unsigned long)((0.35)*(20000000/4000000.0)));
RA3 = 0;
}
}
}

void cmd(char cmd_msg){
PORTB = cmd_msg;
RA4 = 0;
RA3 = 1;
_delay((unsigned long)((0.35)*(20000000/4000000.0)));
RA3 = 0;
}

void clr_char(char spaces){
cmd(0x04);
RA4 = 1;
for (i = spaces; i != -1; i--){
PORTB = ' ';
RA3 = 1;
_delay((unsigned long)((0.35)*(20000000/4000000.0)));
RA3 = 0;
}
cmd(0x06);
cmd(0x14);
}

void initialize(){

PORTA = 0x00;
PORTB = 0x00;
TRISB = 0x00;
TRISA = 0x07;


TMR0 = 0;
OPTION_REG = 0x08;
T0IE = 1;
GIE = 1;
}

void interrupt hour_ISR(){
counter2--;
if (counter2 == 0){
counter2 = 3000;
hour++;
if (hour == 3)
hour = 0;
cmd(0x0A);
_delay((unsigned long)((2)*(20000000/4000.0)));
cmd(0x0E);
}
T0IF = 0;
GIE = 1;
}

void button_press(){
button = -1;
floor_index = -1;
floor_direction = -1;

if ((RA0 == 0 && RA1 == 0 && RA2 == 0))
button = 1;
else if ((RA0 == 1 && RA1 == 0 && RA2 == 0))
button = 2;
else if ((RA0 == 0 && RA1 == 1 && RA2 == 0))
button = 3;
else if ((RA0 == 1 && RA1 == 1 && RA2 == 0))
button = 4;
else if ((RA0 == 0 && RA1 == 0 && RA2 == 1))
button = 5;
else if ((RA0 == 1 && RA1 == 0 && RA2 == 1))
button = 6;
else if ((RA0 == 0 && RA1 == 1 && RA2 == 1))
button = 7;

if (button != -1){
if (button == 1){
floor_index = 0;
floor_direction = 1;
}
for (i = 4*2 - 3; i != 1; i--){
if (button == i){
floor_index = i >> 1;
floor_direction = 1;
if (i % 2 != 0)
floor_direction = 2;
break;
}
}
if (button == 4*2 - 2){
floor_index = 4 - 1;
floor_direction = 2;
}
}
}

void max_prob_floor(){
prob_move = 1;
destination_floor = 4 - 1;
for (i = 4 - 2; i != -1; i--){
if (prob_matrix[i][hour] > prob_matrix[destination_floor][hour])
destination_floor = i;
}
if ((prob_matrix[destination_floor][hour] == 0) || (current_floor == destination_floor)){
destination_floor = -1;
prob_move = 0;
}
}

void call_max(){
for (i = 4 - 1; i > -1; i--){
if ((cabin_call[i] != 0) || (floor_call[i] != 0)){
destination_floor = i;
break;
}
}
}

void call_min(){
for (i = 4 - 1; i > -1; i--){
if ((cabin_call[i] != 0) || (floor_call[i] != 0))
destination_floor = i;
}
}

void set_floor(){
if ((floor_call[floor_index] != floor_direction) && (floor_call[floor_index] < 3)){
if (floor_call[floor_index] == 2)
floor_call[floor_index] = 3;
floor_call[floor_index] += floor_direction;
if (prob_move){
destination_floor = floor_index;
prob_move = 0;
}
if (destination_floor != -1){
if (((current_floor < destination_floor) && ((floor_direction == floor_call[destination_floor]) || (floor_call[destination_floor] > 2) || (floor_index == 4 - 1)) && (floor_index > destination_floor))
|| ((current_floor > destination_floor) && ((floor_direction == floor_call[destination_floor]) || (floor_call[destination_floor] > 2) || (floor_index == 0)) && (floor_index < destination_floor)))
destination_floor = floor_index;
}
}
}

void floor_details(){
cmd(0xC0);
signed char j = 0;
temp = '0';
disp_string(&people_msg);
disp_string((0));
button_press();
while (button != 7){
if (button != -1){
if (floor_index == current_floor){
if (button % 2 != 0 && button != 1){
if (j == 0)
j = 5 + 1;
j--;
}
else {
if (j == 5)
j = -1;
j++;
}
clr_char(1);
temp = j + '0';
disp_string((0));
}
else
set_floor();
}
button_press();
}
prob_matrix[current_floor][hour] += j;
clr_char(9);
j = 0;
if (current_floor == 0)
j = 1;
temp = j + '0';
disp_string(&floor_msg);
disp_string((0));
while (1){
button_press();
if (button != -1){
if (floor_index == current_floor){
if (button % 2 != 0 && button != 1){
if (j == 0)
j = 4 + 1;
j--;
if (j == current_floor){
if (j == 0)
j = 4 + 1;
j--;
}
}
else {
if (j == 4)
j = -1;
j++;
if (j == current_floor)
j++;
}
clr_char(1);
if (j == 4){
temp = 'X';
disp_string((0));
}
else {
temp = j + '0';
disp_string((0));
}
}
else if (button == 7){
if (j == 4)
break;
else {
cabin_call[j] = 1;
if (current_floor > j)
cabin_call[j] = 2;
}
}
else
set_floor();
}
}
clr_char(7);
}

void moving(){
int counter = 1000;
while (current_floor != destination_floor){
cmd(0x01);
temp = current_floor + '0';
disp_string(&moving_msg);
disp_string((0));
while (counter != 0){
counter--;
button_press();
if ((button != -1) && (button != 7)){
set_floor();
}
if ((floor_call[current_floor] > 2) || ((current_floor < destination_floor) && (floor_call[current_floor] == 1)) || ((current_floor > destination_floor) && (floor_call[current_floor] == 2))){
if ((current_floor < destination_floor) && (floor_call[current_floor] >= 3))
floor_call[current_floor] = 2;
else if ((current_floor > destination_floor) && (floor_call[current_floor] >= 3))
floor_call[current_floor] = 1;
else
floor_call[current_floor] = 0;
cabin_call[current_floor] = 0;
cmd(0x01);
disp_string(&reached_msg);
disp_string((0));
floor_details();
cmd(0x01);
temp = current_floor + '0';
disp_string(&moving_msg);
disp_string((0));
}
if (cabin_call[current_floor] != 0){
cabin_call[current_floor] = 0;
cmd(0x01);
disp_string(&reached_msg);
disp_string((0));
_delay((unsigned long)((5)*(20000000/4000.0)));
cmd(0x01);
disp_string(&moving_msg);
disp_string((0));
}
}
counter = 1000;
current_floor = current_floor + ((destination_floor - current_floor > 0) - (destination_floor - current_floor < 0));
}
cmd(0x01);
temp = destination_floor + '0';
disp_string(&reached_msg);
disp_string((0));
prob_move = 0;
destination_floor = -1;
if (floor_call[current_floor] != 0){
cabin_call[current_floor] = 0;
floor_details();
if (floor_call[current_floor] % 2 == 0){
if (floor_call[current_floor] == 4)
floor_call[current_floor] = 3;
floor_call[current_floor] -= 2;
call_min();
}
else {
floor_call[current_floor] -= 1;
call_max();
}
}
else if (cabin_call[current_floor] != 0){
if (cabin_call[current_floor] == 1){
cabin_call[current_floor] = 0;
call_min();
}
else {
cabin_call[current_floor] = 0;
call_max();
}
_delay((unsigned long)((5)*(20000000/4000.0)));
}
if ((current_floor < destination_floor) && (destination_floor != -1))
call_max();
else if ((current_floor > destination_floor) && (destination_floor != -1))
call_min();
if (destination_floor == -1)
max_prob_floor();
}

void main(){
initialize();
hour = 0;
counter2 = 3000;
prob_move = 0;
current_floor = 0;
destination_floor = -1;
i = -10;
while (1){
button_press();
if ((button != -1) && (button != 7)){
floor_call[floor_index] = floor_direction;
destination_floor = floor_index;
}
while (destination_floor != -1){
moving();
i = -10;
}
if (i == -10){
i = -9;
cmd(0x01);
temp = current_floor + '0';
disp_string(&stopped_msg);
disp_string((0));
}
max_prob_floor();
}
}
